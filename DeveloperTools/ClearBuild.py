# This script is only compatible with Python 3 and above.

# Import command line argument parser.
import argparse
import sys
import os
import shutil 

''' For users without a command line (put this into repository wiki later):
    Since you cannot use the "--all" option, please just call (inside your interpreter or IDLE)

    removeClearableFiles(True)

    if you also want to delete the CMake files within the "Build" folder. Please note that you
    have to put this script inside the "Build" folder, if you want to call it with IDLE or something,
    because it otherwise just exits.'''

def isBuildFolder():
    ''' Returns "True" if the current folder is named "Build". False 
        otherwise. '''

    return 'Build' == os.getcwd()[-5:]

def getFolderContent():
    ''' Returns a list of strings, which contain all of the files and
        folders of the current directory. '''

    return os.listdir(os.getcwd())

def getCommandLineArguments():
    ''' Defines a command line argument parser with specific options and
        returns an object holding the values of these.
        Use "x.all" to retrieve a boolian value whether or not the "--all"
        option has been set, given that "x" is the returned object. '''
    
    # Class to store command line arguments in.
    class ArgumentList :
        pass

    # Create argument parser and add options for command line.
    argumentParser = argparse.ArgumentParser(description='Tool for clearing the \
                    "Build" folder. By default it only deletes the binaries. \
                     See optional arguments on how to clear everything, \
                     including files generated by CMake. It always preserves \
                     the "Resources" folder. NOTE: If the current folder is \
                     not the "Build" folder, the script exits silently.', 
                     epilog='Made with love <3')
    # This option defaults to 'False'.
    argumentParser.add_argument('--all', action='store_true',
                        help='Delete every file in the "Build" directory, \
                        including files generated by CMake.')

    # Variable to store l command line arguments, with values, in.
    argumentList = ArgumentList()
    argumentParser.parse_args(namespace=argumentList)

    return argumentList

def getCMakeFileList():
    ''' Returns a list of strings with the names of the files CMake will
        will generate when run inside a directory. '''

    return ['CMakeCache.txt', 'CMakeFiles', 'cmake_install.cmake', 'Makefile']

def getFilesToKeep():
    ''' Returns a list of string with the names of files that should never be
        deleted. '''

    return ['Resources']

def removeFileOrDirectory(file):
    ''' Removes file or directory given as parameter. '''

    # We can assume that if it is not a file, it must be a directory.
    if os.path.isfile(file):
        # Remove a file.
        os.remove(file)
    else:
        # Remove directory with all its contents.
        shutil.rmtree(file)

def removeClearableFiles(removeAll):
    ''' Removes files and folders inside the current directory. If the argument
        equals "True", every file will be deleted, if not, the files from 
        "getCMakeFileList()" will not be removed. Additionally, it never removes
        the files from "getFilesToKeep()". 
        
        NOTE: Function exits the program silently if the current folder is not 
        named "Build". '''

    if not isBuildFolder():
        sys.exit(1)
    
    cmakeFiles = []
    filesToKeep = getFilesToKeep()

    # Check if CMake files should be removed too.
    if not removeAll:
        cmakeFiles = getCMakeFileList()

    for file in getFolderContent():
        if file not in cmakeFiles and file not in filesToKeep:
            removeFileOrDirectory(file)

# 'argumentList.all' will always equal 'False' if the user does not add the
# '--all' option when calling the script.
argumentList = getCommandLineArguments()
removeClearableFiles(argumentList.all)
